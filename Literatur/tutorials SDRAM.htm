<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="de" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" lang="de"><head>



<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<meta http-equiv="content-language" content="de">
<meta http-equiv="imagetoolbar" content="no">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="copyright" content="2000, 2002, 2005, 2007 phpBB Group">
<meta name="keywords" content="">
<meta name="description" content="">
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7">

<title> • Thema anzeigen - SDRAM-Controller</title>

<!--
	phpBB style name: fpga_talk
	Based on style:   prosilver (this is the default phpBB3 style)
	Original author:  Tom Beddard ( http://www.subBlue.com/ )
	Modified by:      DeFate ( http://www.XXX.com/ )
	
	NOTE: This page was generated by phpBB, the free open-source bulletin board package.
	      The phpBB Group is not responsible for the content of this page and forum. For more information
	      about phpBB please visit http://www.phpbb.com
-->

<script type="text/javascript">
// <![CDATA[
	var jump_page = 'Geben Sie die Nummer der Seite an, zu der Sie gehen möchten.:';
	var on_page = '1';
	var per_page = '';
	var base_url = '';
	var style_cookie = 'phpBBstyle';
	var style_cookie_settings = '; path=/; domain=.fpga-talk.de';
	var onload_functions = new Array();
	var onunload_functions = new Array();

	

	/**
	* Find a member
	*/
	function find_username(url)
	{
		popup(url, 760, 570, '_usersearch');
		return false;
	}

	/**
	* New function for handling multiple calls to window.onload and window.unload by pentapenguin
	*/
	window.onload = function()
	{
		for (var i = 0; i < onload_functions.length; i++)
		{
			eval(onload_functions[i]);
		}
	}

	window.onunload = function()
	{
		for (var i = 0; i < onunload_functions.length; i++)
		{
			eval(onunload_functions[i]);
		}
	}

// ]]>
</script>
<script type="text/javascript" src="tutorials%20SDRAM_files/styleswitcher.js"></script>
<script type="text/javascript" src="tutorials%20SDRAM_files/forum_fn.js"></script>
<script type="text/javascript" src="tutorials%20SDRAM_files/animatedcollapse.js"></script>

<link href="tutorials%20SDRAM_files/print.css" rel="stylesheet" type="text/css" media="print" title="printonly">
<link href="tutorials%20SDRAM_files/style.css" rel="stylesheet" type="text/css" media="screen, projection">

<link href="tutorials%20SDRAM_files/normal.css" rel="stylesheet" type="text/css" title="A">
<link href="tutorials%20SDRAM_files/medium.css" rel="alternate stylesheet" type="text/css" title="A+">
<link href="tutorials%20SDRAM_files/large.css" rel="alternate stylesheet" type="text/css" title="A++">



<!--[if lt IE 7]> 
<link href="./styles/fpga_talk/theme/fix_ie6.css" rel="stylesheet" type="text/css" media="screen, projection" />
<![endif]-->

<!--[if gte IE 6]> 
<link href="./styles/fpga_talk/theme/fix_ie7_8.css" rel="stylesheet" type="text/css" media="screen, projection" />
<![endif]-->

</head><body id="phpbb" class="section-viewtopic ltr">
<div id="wrap">
<!--[if lte IE 6]>
<p style="color: red; font-weight: bold;">Your browser is causing web developers a lot of headaches. Please <a href="http://www.stopie6.com">upgrade</a>.
<![endif]-->
	<a id="top" name="top" accesskey="t"></a>
	<div id="page-header">
	<div id="header">
		<p class="skiplink"><a href="#start_here">Zum Inhalt</a></p>
		<!--	<ul>
				<li class="inactive"><a href="#" title="Startseite">Startseite</a></li>
				<li class="active">Forum</li>
				<li class="inactive"><a href="#" title="About Us">About Us</a></li>
				<li class="inactive"><a href="#" title="Pics">Pics</a></li>
				<li class="inactive"><a href="#" title="Blog">Blog</a></li>
				<li class="inactive"><a href="#" title="Contact">Contact</a></li>
			</ul>-->
		
			<div id="site-description">
				<h1> Gemeinsam Lösungen finden</h1></div>
	</div>
	<div id="nav_icons_logout">
		<div id="icon_index"><a href="http://www.fpga-talk.de/forum/index.php" title="Foren-Übersicht" accesskey="h"><span class="gohst-space"></span><!--Foren-Übersicht --></a></div>
		
		<div id="icon_log"><a href="http://www.fpga-talk.de/forum/ucp.php?mode=login" title="Anmelden" accesskey="x"><span class="gohst-space"></span><!--Anmelden--></a></div>
		<div id="icon_regist"><a href="http://www.fpga-talk.de/forum/ucp.php?mode=register" title="Registrieren"><span class="gohst-space"></span><!--Registrieren--></a></div>
		<div id="icon_faqq"><a href="http://www.fpga-talk.de/forum/faq.php" title="Häufig gestellte Fragen"><span class="gohst-space"></span><!--FAQ --></a></div>
	</div>

			<div id="search-box">
				<form action="./search.php" method="post" id="search">
				<fieldset>
					<input name="keywords" id="keywords" maxlength="128" title="Suche nach Wörtern" class="inputbox search" value="Suche…" onclick="if(this.value=='Suche…')this.value='';" onblur="if(this.value=='')this.value='Suche…';" type="text"> 
					<input class="button2" value="GO" type="submit"><a href="http://www.fpga-talk.de/forum/search.php" title="Zeigt die erweiterten Suchoptionen an">Erweiterte Suche</a> 
				</fieldset>
				</form>
			</div>	

	
</div>

	<a name="start_here"></a>
	<div id="page-body">
			<ul class="linklist">
				<li><a href="http://www.fpga-talk.de/forum/index.php" accesskey="h">Foren-Übersicht</a> <strong>‹</strong> <a href="http://www.fpga-talk.de/forum/viewforum.php?f=4">VHDL Ecke</a> <strong>‹</strong> <a href="http://www.fpga-talk.de/forum/viewforum.php?f=32">VHDL Designs</a></li>
				<li class="rightside"><a href="#" onclick="fontsizeup(); return false;" onkeypress="return fontsizeup(event);" class="fontsize" title="Ändere Schriftgröße">Ändere Schriftgröße</a></li>
				<li class="rightside"><a href="http://www.fpga-talk.de/forum/viewtopic.php?f=32&amp;t=39&amp;start=0&amp;view=print" title="Druckansicht" accesskey="p" class="print">Druckansicht</a></li>
			</ul>		
		
<h2><a href="http://www.fpga-talk.de/forum/viewtopic.php?f=32&amp;t=39&amp;start=0">SDRAM-Controller</a></h2>
<!-- NOTE: remove the style="display: none" when you want to have the forum description on the topic body --><div style="display: none ! important;">Hier findet ihr diverse VHDL Designs von Forum-Benutzern oder könnt Anregungen für Designs liefern.<br></div>

<div class="topic-actions">

	<div class="buttons">
	
		<div class="reply-icon"><a href="http://www.fpga-talk.de/forum/posting.php?mode=reply&amp;f=32&amp;t=39" title="Antwort erstellen"><span></span>Antwort erstellen</a></div>
	
	</div>

	
		<div class="search-box">
			<form method="post" id="topic-search" action="./search.php?t=39">
			<fieldset>
				<input class="inputbox search tiny" name="keywords" id="search_keywords" size="20" value="Thema durchsuchen…" onclick="if(this.value=='Thema durchsuchen…')this.value='';" onblur="if(this.value=='')this.value='Thema durchsuchen…';" type="text">
				<input class="button1" value="Suche" type="submit">
				<input value="39" name="t" type="hidden">
				<input value="msgonly" name="sf" type="hidden">
			</fieldset>
			</form>
		</div>
	
		<div class="pagination">
			2 Beiträge
			 • Seite <strong>1</strong> von <strong>1</strong>
		</div>
	

</div>
<div class="clear"></div>


	<div id="p76" class="post bg2">
		<div class="inner"><span class="corners-top"><span></span></span>

		<div class="postbody">
			

			<h3 class="first"><a href="#p76">SDRAM-Controller</a></h3>
			<p class="author"><a href="http://www.fpga-talk.de/forum/viewtopic.php?p=76#p76"><img src="tutorials%20SDRAM_files/icon_post_target.gif" alt="Beitrag" title="Beitrag" width="11" height="9"></a>von <strong><a href="http://www.fpga-talk.de/forum/memberlist.php?mode=viewprofile&amp;u=82">Rhombus</a></strong> » Mi 19. Mai 2010, 11:04 </p>

			

			<div class="content">Hallo,<br><br>ich
bin auf der Suche nach einem SDRAM-Controller auf VHDL-Basis. Gibt es
hier schon Erfahrungen mit der Programmierung? Eine gute
SDRAM-Dokumentation könnte mir schon weiterhelfen. Vielleicht kann mir
sogar jemand ein funktionierendes oder teilweise funktionierendes Modul
zur Verfügung stellen?<br><br>Vielen Dank für eure Hilfe!</div>

			

		</div>

		
			<dl class="postprofile" id="profile76">
			<dt>
				<a href="http://www.fpga-talk.de/forum/memberlist.php?mode=viewprofile&amp;u=82">Rhombus</a>
			</dt>

			

		<dd>&nbsp;</dd>

		<dd><strong>Beiträge:</strong> 1</dd><dd><strong>Registriert:</strong> Do 6. Mai 2010, 11:01</dd>

		</dl>
	

		<div class="back2top"><a href="#wrap" class="top" title="Nach oben">Nach oben</a></div>

		<span class="corners-bottom"><span></span></span></div>
	</div>

	<hr class="divider">

	<div id="p77" class="post bg1">
		<div class="inner"><span class="corners-top"><span></span></span>

		<div class="postbody">
			

			<h3><a href="#p77">Re: SDRAM-Controller</a></h3>
			<p class="author"><a href="http://www.fpga-talk.de/forum/viewtopic.php?p=77#p77"><img src="tutorials%20SDRAM_files/icon_post_target.gif" alt="Beitrag" title="Beitrag" width="11" height="9"></a>von <strong><a href="http://www.fpga-talk.de/forum/memberlist.php?mode=viewprofile&amp;u=53">Tobias</a></strong> » Di 25. Mai 2010, 07:18 </p>

			

			<div class="content">Hallo Rhombus,<br><br>als gute Beschreibungen würde ich die Datenblätter <a href="http://download.micron.com/pdf/datasheets/dram/sdram/64MSDRAM.pdf" class="postlink">Micron 64Mb SDRAM</a> und <a href="http://www.google.de/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;ved=0CBcQFjAA&amp;url=http%3A%2F%2Fminimig.googlecode.com%2Ffiles%2FA2V64S40CTP.pdf&amp;rct=j&amp;q=A2V64S40CTP&amp;ei=wXX7S7OINsKmOJOgxf0B&amp;usg=AFQjCNGDOERZaX-9QyBdPEolWhko8BOXvw" class="postlink">Powerchip SDRAM</a> bezeichnen.<br><br>Einfach mal durchblättern. <br><br>Ich
habe ein SDRAM Modul für das Cyclone II DE1 Board in VHDL geschrieben.
Sollte aber problemlos mit anderen SDRAMs funktionieren. Prinzipiell
erfolgt die Anbindung des SDRAM an den FPGA über die folgenden
Signalleitungen: <br><br><img src="tutorials%20SDRAM_files/SDRAM_FPGA.png" alt="Bild"><br><br>Die Anbindung an das eigene bestehende VHDL Design wird über die folgenden Signale realisiert:<br><br><img src="tutorials%20SDRAM_files/SDRAM_Einbindung.png" alt="Bild"><br><br>Prinzipiell unterstützt das Design folgende Dinge:<br><br><ul>Burst-Modi: 1, 2, 4, 8, Full Page</ul><ul>CAS-Latency: 2, 3, 4</ul><ul>RCD-Timings: 2, 3, 4</ul><ul>verschiedene Burst-Sequenzen für Lese- und Schreibbefehle</ul><ul>beliebige Burst-Längen über BST-Befehl</ul><ul>u.a...</ul><br><span style="font-weight: bold;">Allgemeine Funktionsbeschreibung SDRAM:</span><br><br>Ein
8 Megabyte großer SDRAM ist meist aus vier Bänken aufgebaut. Je nach
Breite der Datenanbindung (4, 8 oder 16 Bit) sind die Bänke
unterschiedlich strukturiert. Eine kurze Erläuterung am Beispiel eines
SDRAMs mit 16 Bit breitem Dateninterface. Dieser besitzt 4 Bänke, jede
dieser Bank ist in 4096 Zeilen zu je 256 Spalten eingeteilt. Daraus
wiederum ergeben sich die benötigten breiten der Adressleitungen. Für
die Adressierung der Zeilen werden 12 Bit benötigt, für die Spalten 8
Bit. Die Adressierung der vier Bänke erfolgt separat über die 2
Leitungen BA0 und BA1. Über die Bank-, Zeilen- und Spaltenadresse kann
jedes Datenword eindeutig angesprochen werden. Meistens wird aber
zwischen unterschiedlichen Lese- und Schreibmodi unterschieden. <br>Alle
Lese- und Schreibprozesse werden auf die Burst-Länge bezogen. Das
bedeutet z.B. wenn man mit einer Burst-Länge 1 arbeitet und einen
Lesebefehl aktiviert, so bekommt man auch nur die 16 Bit der
adressierten Speicherzelle vom SDRAM geliefert. Arbeitet man mit einer
Burst-Länge von 8, so bekommt man zur adressierten Speicherzelle noch
die folgenden 7 Speicherzellen mit ausgelesen. Dasselbe gilt auch für
die Schreibprozesse. Erst durch solch kombinierte Lese- und
Schreibprozesse entfaltet ein SDRAM seinen Geschwindigkeitsvorteil
gegenüber SRAMs. Den nur mit dem Anlegen der Zieladresse ist der
Datentransfer zum und vom SDRAM nicht getan. Es werden zusätzliche
Takte zum Aktivieren der Bank, adressieren der Reihe und der Spalte
benötigt. Anschließend wird die Bank wieder deaktiviert. Dies geschieht
bei jedem Lese- und Schreibbefehl. So werden bei Burst-Länge 1 und
einem CAS-Latency von 3 mindestens 7 Takte benötigt um einen Wert in
eine Speicherzelle zu schreiben. Das bedeutet einen Overhead von 6
Takten. Bei größeren Burst-Längen (besonders im Full-Page-Mode) fallen
diese 6 Takte gegenüber 256 Daten schreibenden Takten kaum in Gewicht. <br><br><a href="http://www.fpga-talk.de/forum/public_images/SDRAM_Dauer_Befehl.png" class="postlink"><img src="tutorials%20SDRAM_files/SDRAM_Dauer_Befehl_s.png" alt="Bild"></a><br><br>Die
verfügbaren Kommandos zur Ansteuerung des SDRAM werden über die CAS,
RAS und WE Leitungen codiert. Prinzipiell gibt es 4 Operationen
(ACTIVE, READ, WRITE, PRECHARGE) und den Ruhezustand (NOP).<br><br><span style="font-weight: bold;">VHDL-Design:</span> <br><br><dl class="codebox"><dt>Code: <a href="#" onclick="selectCode(this); return false;">Alles auswählen</a></dt><dd><code>----------------------------------------------------------------------------------<br>-- Company: &nbsp; &nbsp;&nbsp; &nbsp;FTZ-Leipzig<br>-- Engineer: &nbsp; &nbsp;&nbsp; &nbsp;Tobias Rudloff<br>-- <br>-- Create Date:&nbsp; &nbsp; 13:47:10 10/24/2007 <br>-- Design Name: <br>-- Module Name:&nbsp; &nbsp; sdram_controller_main - Behavioral <br><br>-- Description: <br>--<br>-- Revision: <br>-- Revision 0.01 - File Created<br>-- Additional Comments: <br>--<br>----------------------------------------------------------------------------------<br>--library IEEE;<br>--use IEEE.STD_LOGIC_1164.all;<br>--<br>--package sdram_package is<br>--<br>--constant ADDR_SIZE&nbsp; : integer:= 23;<br>--constant DATA_SIZE&nbsp; : integer:= 16; <br>--constant ROWSTART&nbsp; &nbsp;: integer:= 8;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br>--constant ROWSIZE&nbsp; &nbsp; : integer:= 12;<br>--constant COLSTART&nbsp; &nbsp;: integer:= 0;<br>--constant COLSIZE&nbsp; &nbsp; : integer:= 8;<br>--constant BANKSTART&nbsp; : integer:= 20;<br>--constant BANKSIZE&nbsp; &nbsp;: integer:= 2;<br>--constant INIT_PER&nbsp; &nbsp;: integer:= 48000;--96 bis 120MHz<br>--constant REF_PER&nbsp; &nbsp; : integer:= 2148;&nbsp; &nbsp;--96 bis 120MHz<br>--constant SC_RCD&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 3;<br>--constant SC_PM&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 0; &nbsp; &nbsp;-- 0=Burst Write/1=Single Write(BL automatisch 1)<br>--constant SC_CL&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 3;&nbsp; &nbsp;-- CAS Latency<br>--constant SC_BT&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 0;&nbsp; &nbsp;-- Burst Type (0=seqeuntial/1=interleave)<br>--constant SC_BL&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 8;&nbsp; &nbsp;-- Burst Mode&nbsp; <br>--constant SC_BSQ_RD &nbsp; &nbsp;: integer:= 0; &nbsp; &nbsp;-- Burst Sequence &nbsp; &nbsp;0 --&gt; Order 01234567<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp;&nbsp; (Lesen)&nbsp; &nbsp;&nbsp; &nbsp;1 --&gt; Order 12345670<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;2 --&gt;
Order 23456701<br>--&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;3 --&gt; Order 34567012<br>--&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;4 --&gt; Order 45670123<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;5 --&gt;
Order 56701234<br>--&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;6 --&gt; Order 67012345<br>--&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;7 --&gt; Order 70123456<br>--constant SC_BSQ_WR &nbsp; &nbsp;: integer:= 0; &nbsp; &nbsp;-- Burst Sequence &nbsp; &nbsp;0 --&gt; Order 01234567<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp; (Schreiben)&nbsp; &nbsp;1 --&gt; Order 12345670<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;2 --&gt;
Order 23456701<br>--&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;3 --&gt; Order 34567012<br>--&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;4 --&gt; Order 45670123<br>--&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;5 --&gt;
Order 56701234<br>--&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;6 --&gt; Order 67012345<br>--&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;7 --&gt; Order 70123456<br>--constant tDQSS&nbsp; &nbsp;&nbsp; &nbsp;: integer:= 0;<br>--<br>--end sdram_package;<br><br>----------------------------------------------------------------------------------<br>library IEEE;<br>use IEEE.STD_LOGIC_1164.ALL;<br>use IEEE.STD_LOGIC_ARITH.ALL;<br>use IEEE.STD_LOGIC_UNSIGNED.ALL;<br>use work.sdram_package.ALL;<br><br>entity sdram_controller_main is<br>&nbsp;
&nbsp;port(sysclk &nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; &nbsp; in
std_logic;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- Systemtakt<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_clock&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp; in std_logic;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp; reset&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;
&nbsp;:&nbsp; &nbsp; in std_logic;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;-- Systemreset<br>&nbsp; &nbsp;&nbsp; &nbsp; -- HOST Schnittstellen --<br>&nbsp;
&nbsp;&nbsp; &nbsp; addr&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;:&nbsp;
&nbsp; in std_logic_vector(ADDR_SIZE - 1 downto 0);&nbsp; &nbsp;--
Addresse für Controlleranfrage&nbsp; <br>&nbsp; &nbsp;&nbsp; &nbsp;
wr&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; &nbsp;
in std_logic;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--
Schreibanfrage<br>&nbsp; &nbsp;&nbsp; &nbsp; rd&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; &nbsp; in std_logic; &nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- Leseanfrage<br>&nbsp;
&nbsp;&nbsp; &nbsp; bst&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: &nbsp;
&nbsp; in std_logic;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;-- Burst Stop Command<br>&nbsp; &nbsp;&nbsp; &nbsp; act&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: &nbsp; &nbsp;out std_logic;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- SDRAM aktiv<br>&nbsp;
&nbsp;&nbsp; &nbsp; done&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp;
&nbsp;out std_logic;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;-- Lese-/Schreibprozess erledigt<br>&nbsp; &nbsp;&nbsp; &nbsp; data_in&nbsp; &nbsp;&nbsp; &nbsp;: &nbsp; &nbsp; in std_logic_vector(DATA_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; data_out&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic_vector(DATA_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; in_req&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; out_valid&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_clk_intern&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_ck&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_cke&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_cs&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp; dram_we&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_cas&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_ras&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp; dram_dqm&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out
std_logic_vector(DATA_SIZE/8 - 1 downto 0); --LDQM und UDQM<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_ba&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic_vector( 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_addr &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; &nbsp;out std_logic_vector(11 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; dram_dq&nbsp; &nbsp; &nbsp; &nbsp;: inout std_logic_vector(DATA_SIZE - 1 downto 0)<br>&nbsp; &nbsp;&nbsp; &nbsp; );<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>end sdram_controller_main;<br><br>architecture Behavioral of sdram_controller_main is<br><br>component control_interface<br>&nbsp; &nbsp;port(CLK&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RESET_N &nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_ACK&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RD_start&nbsp; &nbsp;: in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; WR_start&nbsp; &nbsp;: in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; rd_wr_stop : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RD_active&nbsp; : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; WR_active&nbsp; : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REFRESH&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; PRECHARGE&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; LOAD_MODE&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_REQ&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; INIT_REQ&nbsp; &nbsp;: out std_logic<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; );<br>end component;<br><br>component command<br>&nbsp; &nbsp;port(CLK &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; RESET_N&nbsp; &nbsp;:&nbsp; in std_logic;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp; SADDR&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic_vector(ADDR_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; READA&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp; WRITEA&nbsp; &nbsp; :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; REFRESH&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; LOAD_MODE :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; PALL&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; PRECHARGE :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; REF_REQ&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; INIT_REQ&nbsp; :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; PM_STOP&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; REF_ACK&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; CM_ACK&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; OE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; SA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic_vector(11 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; BA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic_vector( 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp; CS_N&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; CKE&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp; RAS_N&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; CAS_N&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp; WE_N&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic<br>&nbsp; &nbsp;&nbsp; &nbsp; );<br>end component;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br>component sdr_data_path<br>&nbsp; &nbsp;port(CLK&nbsp; &nbsp;&nbsp; :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RESET_N :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; DATAIN&nbsp; :&nbsp; in std_logic_vector(DATA_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; DQOUT&nbsp; &nbsp;&nbsp; : out std_logic_vector(DATA_SIZE - 1 downto 0)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; );<br>end component;<br><br>SIGNAL sig_CLK&nbsp; &nbsp; &nbsp; &nbsp; : std_logic;<br>SIGNAL sig_SADDR&nbsp; &nbsp; &nbsp; : std_logic_vector(ADDR_SIZE - 1 downto 0);<br>SIGNAL sig_READA&nbsp; &nbsp; &nbsp; : std_logic; <br>SIGNAL sig_WRITEA &nbsp; &nbsp; : std_logic;<br>SIGNAL sig_REFERESH&nbsp; : std_logic;&nbsp; <br>SIGNAL sig_PRECHARGE : std_logic;&nbsp; <br>SIGNAL sig_LOAD_MODE : std_logic;<br>SIGNAL sig_REF_ACK&nbsp; &nbsp; : std_logic;<br>SIGNAL sig_REF_REQ&nbsp; &nbsp; : std_logic;<br>SIGNAL sig_INIT_REQ&nbsp; &nbsp; : std_logic;<br>SIGNAL sig_CM_ACK&nbsp; &nbsp; : std_logic;<br>SIGNAL sig_OE&nbsp; &nbsp;&nbsp; &nbsp; : std_logic; <br>SIGNAL sig_DQOUT&nbsp; &nbsp; : std_logic_vector(DATA_SIZE - 1 downto 0); <br>SIGNAL sig_PM_STOP&nbsp; &nbsp; : std_logic; <br>SIGNAL Pre_DONE&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL Pre_RD&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL Pre_WR&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL mDONE&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL ST&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; : std_logic_vector(9 downto 0);<br>SIGNAL Read&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL Write&nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL sig_act &nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL PALL &nbsp; &nbsp;&nbsp; &nbsp; : std_logic;<br>SIGNAL prePALL &nbsp; &nbsp; &nbsp; &nbsp; : std_logic;<br>SIGNAL sig_dram_ck &nbsp; &nbsp; : std_logic;<br><br>SIGNAL burst_stop_command : std_logic:='0';<br>SIGNAL bst_cnt &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; : std_logic_vector(3 downto 0):=X"0";<br><br>begin<br><br>C2:control_interface<br>&nbsp; &nbsp;port map(CLK&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; =&gt; sysclk,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RESET_N &nbsp; &nbsp; =&gt; reset,&nbsp; &nbsp; &nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REF_ACK &nbsp; &nbsp; =&gt; sig_REF_ACK,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RD_start&nbsp; =&gt; rd,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;WR_start&nbsp; =&gt; wr,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; rd_wr_stop =&gt; mDONE,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RD_active =&gt; Read,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; WR_active =&gt; Write,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REFRESH &nbsp; &nbsp; =&gt; sig_REFERESH,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; PRECHARGE =&gt; sig_PRECHARGE,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; LOAD_MODE =&gt; sig_LOAD_MODE,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REF_REQ&nbsp; &nbsp; =&gt; sig_REF_REQ,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; INIT_REQ&nbsp; &nbsp; =&gt; sig_INIT_REQ<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; );<br><br>C3:command<br>&nbsp; &nbsp;port map(CLK&nbsp; &nbsp;&nbsp; &nbsp;=&gt; sysclk, &nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RESET_N&nbsp; &nbsp;=&gt; reset,&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; SADDR&nbsp; &nbsp;&nbsp; &nbsp;=&gt;
addr,&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; READA&nbsp; &nbsp;&nbsp; &nbsp;=&gt; sig_READA,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; WRITEA&nbsp; &nbsp;&nbsp; &nbsp;=&gt; sig_WRITEA,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REFRESH&nbsp; &nbsp;=&gt; sig_REFERESH,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; LOAD_MODE =&gt; sig_LOAD_MODE,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; PALL&nbsp; &nbsp;&nbsp; &nbsp;=&gt; PALL,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; PRECHARGE =&gt; sig_PRECHARGE,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REF_REQ&nbsp; &nbsp;=&gt; sig_REF_REQ,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; INIT_REQ&nbsp; =&gt; sig_INIT_REQ,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REF_ACK&nbsp; &nbsp;=&gt; sig_REF_ACK,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; CM_ACK&nbsp; &nbsp;&nbsp; &nbsp;=&gt; SIG_CM_ACK,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; OE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;=&gt; sig_OE,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; PM_STOP&nbsp; &nbsp;=&gt; sig_PM_STOP,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; SA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_addr,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; BA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;=&gt; dram_ba,&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; CS_N&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_cs,&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; CKE&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_cke,&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RAS_N&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_ras,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; CAS_N&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_cas,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; WE_N&nbsp; &nbsp;&nbsp; &nbsp;=&gt; dram_we&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; );<br><br>C4:sdr_data_path<br>&nbsp; &nbsp;port map(CLK&nbsp; &nbsp; =&gt; sysclk,&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; RESET_N =&gt; reset,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; DATAIN&nbsp; =&gt; data_in,&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; DQOUT&nbsp; &nbsp; =&gt; sig_DQOUT&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; );<br><br>dram_clk_intern &lt;= not dram_clock;<br>dram_ck &lt;= not dram_clock;<br><br>process(sysclk)<br><br>begin<br><br>if (sysclk'event and sysclk = '1') then<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if ((ST &gt;= SC_CL -1 + tDQSS) and (ST &lt;= SC_CL + tDQSS)) then&nbsp; <br>&nbsp; &nbsp;&nbsp; &nbsp;sig_PM_STOP &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;sig_PM_STOP &lt;= '0';<br>&nbsp; &nbsp;end if;<br><br>&nbsp;
&nbsp;if (Write = '1' and ST &gt;= SC_RCD) then&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;if (ST &gt;= SC_RCD + SC_BL) then&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dram_dqm &lt;= "11";<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dram_dqm &lt;= "00";<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;elsif (Read = '1' and ST &gt;= SC_CL) then<br>&nbsp; &nbsp;&nbsp; &nbsp;if (ST &gt;= SC_CL + SC_BL + 1) then&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dram_dqm &lt;= "11";<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dram_dqm &lt;= "00";<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;dram_dqm &lt;= "11";<br>&nbsp; &nbsp;end if;<br><br>end if;<br><br>end process;<br><br>sig_act &lt;= Read or Write;<br>act &lt;= sig_act;<br><br>process(sysclk,reset)<br><br>begin<br><br>if (reset = '0') then<br>&nbsp; &nbsp;mDONE&nbsp; &nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;ST&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;Pre_RD&nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;Pre_WR&nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;Read&nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;Write&nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;out_valid &lt;= '0';<br>&nbsp; &nbsp;in_req&nbsp; &nbsp;&nbsp; &lt;= '0';<br>&nbsp; &nbsp;PALL &lt;= '0';<br>&nbsp; &nbsp;prePALL &lt;= '0';<br>elsif (sysclk'event and sysclk = '1') then<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;Pre_RD&nbsp; &nbsp;&lt;=&nbsp; &nbsp;rd;<br>&nbsp; &nbsp;Pre_WR&nbsp; &nbsp;&lt;=&nbsp; &nbsp;wr;<br>&nbsp; &nbsp;case ST is <br>&nbsp; &nbsp; &nbsp; when "0000000000" =&gt;&nbsp; &nbsp;if (Pre_RD = '0' and rd = '1') then<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Read&nbsp; &nbsp;&lt;=&nbsp; &nbsp;'1';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Write&nbsp; &nbsp;&lt;=&nbsp; &nbsp;'0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sig_READA &lt;= '1';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ST&nbsp; &nbsp;&lt;=&nbsp;
&nbsp;"0000000001";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (Pre_WR = '0' and wr = '1') then<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Read&nbsp;
&nbsp;&lt;=&nbsp; &nbsp;'0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;Write&nbsp; &nbsp;&lt;=&nbsp; &nbsp;'1';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;in_req &lt;= '1'; <br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sig_WRITEA &lt;= '1';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ST&nbsp; &nbsp;&lt;=&nbsp;
&nbsp;"0000000001";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;when "0000000001" =&gt;&nbsp; &nbsp;if (SIG_CM_ACK = '1') then<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sig_READA &lt;= '0';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sig_WRITEA &lt;= '0';<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ST&nbsp; &nbsp;&lt;=&nbsp;
&nbsp;"0000000010";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp; &nbsp; when others =&gt;&nbsp; &nbsp;ST &lt;= ST + 1;<br>&nbsp; &nbsp;end case;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (ST = SC_CL + SC_RCD + SC_BL + 1) then <br>&nbsp; &nbsp;&nbsp; &nbsp;mDONE &lt;= '1';<br>&nbsp; &nbsp;elsif (ST = SC_CL + SC_RCD + SC_BL + 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;ST &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;&nbsp; &nbsp;mDONE &lt;= '0';&nbsp; &nbsp;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (bst = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;burst_stop_command &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;if (burst_stop_command = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (bst_cnt = SC_CL + SC_RCD - 1) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;burst_stop_command &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Read &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Write &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ST &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;out_valid &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;in_req &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;prePALL &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dram_dq &lt;= (others =&gt; 'Z');<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bst_cnt &lt;= bst_cnt + '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;prePALL &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (Read = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;dram_dq &lt;= (others =&gt; 'Z');<br>&nbsp;
&nbsp;&nbsp; &nbsp;if ((ST &gt;= SC_CL + SC_RCD + 1) and (ST &lt;=
SC_CL + SC_RCD + SC_BL + 2)) then&nbsp; --ST = 6...&lt;&lt;14<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;out_valid &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;data_out &lt;= dram_dq;<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (ST = SC_CL + SC_RCD + SC_BL)
then&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--ST = 12<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (ST = SC_CL + SC_RCD + SC_BL + 1)
then&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--ST = 13<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;out_valid &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Read &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (Write = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;dram_dq &lt;= sig_DQOUT;<br><br>&nbsp; &nbsp;&nbsp; &nbsp;if (ST = SC_BL) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;in_req &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;if (ST = SC_CL + SC_BL - 1) then&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;if (ST = SC_CL + SC_BL + 2) then &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Write &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (Write = '0' and Read = '0' and prePALL = '0') then <br>&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '0';<br>&nbsp; &nbsp;elsif (Write = '0' and Read = '0' and prePALL = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;PALL &lt;= '1';<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>end if;<br><br>end process;<br><br>process(sysclk,reset)<br><br>begin<br><br>if (reset = '0') then<br>&nbsp; &nbsp;done &lt;= '0';<br>&nbsp; &nbsp;Pre_DONE &lt;=&nbsp; &nbsp;'0';<br>elsif (sysclk'event and sysclk = '1') then<br>&nbsp; &nbsp;Pre_DONE &lt;= mDONE;<br>&nbsp; &nbsp;if (Pre_DONE = '0' and mDONE = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;done &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;done &lt;= '0';<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>end Behavioral;<br><br>--###############################################################################--<br>library IEEE;<br>use IEEE.STD_LOGIC_1164.ALL;<br>use IEEE.STD_LOGIC_ARITH.ALL;<br>use IEEE.STD_LOGIC_UNSIGNED.ALL;<br>use work.sdram_package.ALL;<br><br>entity control_interface is<br>&nbsp; &nbsp;port(CLK&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RESET_N &nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_ACK&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RD_start&nbsp; &nbsp;: in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; WR_start&nbsp; &nbsp;: in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; rd_wr_stop : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RD_active&nbsp; : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; WR_active&nbsp; : in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REFRESH&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; PRECHARGE&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; LOAD_MODE&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_REQ&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; INIT_REQ&nbsp; &nbsp;: out std_logic<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; );<br>end control_interface;<br><br>architecture Behavioral of control_interface is<br><br>signal timer &nbsp; &nbsp;&nbsp; &nbsp;: integer:=0;<br>signal init_timer&nbsp; : integer:=0;<br>signal ci_init_req : std_logic;<br><br>constant CI_INIT_PER : integer:= INIT_PER;<br>constant CI_REF_PER&nbsp; : integer:= REF_PER;<br><br>begin<br><br>INIT_REQ &lt;= ci_init_req;<br><br>process(clk,reset_n)&nbsp; &nbsp;<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;REF_REQ &lt;= '0';<br>elsif (clk'event and clk = '1') then<br><br>&nbsp; &nbsp;if (ci_init_req = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= CI_REF_PER + 200;<br>&nbsp; &nbsp;&nbsp; &nbsp;REF_REQ &lt;= '0';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= timer - 1;<br>&nbsp; &nbsp;&nbsp; &nbsp;if (RD_active = '0' and WR_active = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= timer - 1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (timer = 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REF_REQ &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= timer - 1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br><br>&nbsp; &nbsp;if (REF_ACK = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= CI_REF_PER;<br>&nbsp; &nbsp;&nbsp; &nbsp;REF_REQ &lt;= '0';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;if (ci_init_req = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= CI_REF_PER + 200;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REF_REQ &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (RD_active = '0' and WR_active = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;timer &lt;= timer - 1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (timer = 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REF_REQ &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;init_timer &lt;= 0;<br>&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;PRECHARGE&nbsp; &lt;= '0'; <br>&nbsp; &nbsp;LOAD_MODE&nbsp; &lt;= '0';<br>&nbsp; &nbsp;ci_init_req&nbsp; &nbsp;&lt;= '0';<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;if (init_timer &lt; (CI_INIT_PER + 201)) then<br>&nbsp; &nbsp;&nbsp; &nbsp;init_timer &lt;= init_timer + 1;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;if (init_timer &lt; CI_INIT_PER) then<br>&nbsp; &nbsp;&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;PRECHARGE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;LOAD_MODE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;ci_init_req &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp;
&nbsp;&nbsp; &nbsp;if (init_timer = (CI_INIT_PER + 20)) then&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--Precharge Befehl als erster<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '0';&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--Befehl der Initialisierungs-<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PRECHARGE &lt;= '1';&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;--sequenz<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_MODE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ci_init_req &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (init_timer = (CI_INIT_PER +&nbsp;
40) or&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;--8 x Refresh Befehl <br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER
+&nbsp; 60) or&nbsp; &nbsp;&nbsp; &nbsp;--während der
Initialisierungsphase<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER +&nbsp; 80) or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER + 100) or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER + 120) or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER + 140) or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER + 160) or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; init_timer = (CI_INIT_PER + 180)) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PRECHARGE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_MODE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ci_init_req &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (init_timer = (CI_INIT_PER + 200)) then&nbsp; &nbsp;-- <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PRECHARGE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_MODE &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ci_init_req &lt;= '0';&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;REFRESH&nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PRECHARGE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_MODE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ci_init_req &lt;= '0';&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>end Behavioral;<br>--###############################################################################--<br>library IEEE;<br>use IEEE.STD_LOGIC_1164.ALL;<br>use IEEE.STD_LOGIC_ARITH.ALL;<br>use IEEE.STD_LOGIC_UNSIGNED.ALL;<br>use work.sdram_package.ALL;<br><br>entity command is<br>&nbsp; &nbsp;port(CLK &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RESET_N &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;&nbsp; &nbsp;<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; SADDR&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
:&nbsp; in std_logic_vector(ADDR_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; READA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; WRITEA &nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REFRESH&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; LOAD_MODE&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; PALL&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; PRECHARGE&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_REQ&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; INIT_REQ&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; PM_STOP&nbsp; &nbsp;&nbsp; &nbsp;:&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; REF_ACK&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; CM_ACK&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; OE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; SA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic_vector(11 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; BA&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic_vector( 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; CS_N&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; CKE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RAS_N&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic; &nbsp; &nbsp;--negative RAS<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; CAS_N&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: out std_logic; &nbsp; &nbsp;--negative CAS<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; WE_N&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;:
out std_logic&nbsp; &nbsp;&nbsp; &nbsp;--negative WE<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; );<br>end command;<br><br>architecture Behavioral of command is<br><br>signal do_reada&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal do_writea&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal do_refresh&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal do_precharge&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;&nbsp; &nbsp;&nbsp; &nbsp;<br>signal do_load_mode&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal do_initial&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal command_done&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal command_delay&nbsp; &nbsp;: std_logic_vector(7 downto 0);&nbsp; &nbsp; &nbsp; &nbsp; <br>signal rw_shift&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic_vector(2 downto 0);<br>signal rw_flag&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal do_rw&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal oe_shift&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic_vector(7 downto 0);<br>signal oe1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal oe2&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal oe3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal rp_shift&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic_vector(3 downto 0);<br>signal rp_done&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal ex_read&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal ex_write&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic;<br>signal SDR_BL&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: std_logic_vector(2 downto 0);<br>signal rowaddr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: std_logic_vector(ROWSIZE - 1 downto 0);<br>signal coladdr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: std_logic_vector(COLSIZE - 1 downto 0);<br>signal bankaddr &nbsp; &nbsp; &nbsp; &nbsp;: std_logic_vector(BANKSIZE - 1 downto 0);<br><br>signal page_count&nbsp; &nbsp;&nbsp; &nbsp;: integer:=0;<br><br>constant SDR_BT &nbsp; &nbsp; &nbsp; &nbsp;: std_logic_vector(1 downto 0):= CONV_STD_LOGIC_VECTOR(SC_BT,2);&nbsp; &nbsp;<br>constant SDR_CL &nbsp; &nbsp; &nbsp; &nbsp;: std_logic_vector(2 downto 0):= CONV_STD_LOGIC_VECTOR(SC_CL,3);&nbsp; <br>constant con_SC_PM &nbsp; &nbsp;&nbsp; &nbsp;: std_logic:='0';&nbsp; -- 1=all Banks Precharge / 0= Bank selected by BA0,BA1<br><br>begin<br><br>rowaddr &lt;= SADDR(ROWSTART + ROWSIZE - 1 downto ROWSTART);<br>coladdr &lt;= SADDR(COLSTART + COLSIZE - 1 downto COLSTART);<br>bankaddr &lt;= SADDR(BANKSTART + BANKSIZE - 1 downto BANKSTART);<br><br>process(clk,reset_n)<br><br>begin <br><br>case (SC_BL) is <br>&nbsp; &nbsp;when 1 =&gt;&nbsp; &nbsp;&nbsp; &nbsp;-- BL = 1<br>&nbsp; &nbsp;&nbsp; &nbsp;SDR_BL &lt;= "000";<br>&nbsp; &nbsp;when 2 =&gt;&nbsp; &nbsp;&nbsp; &nbsp;-- BL = 2<br>&nbsp; &nbsp;&nbsp; &nbsp;SDR_BL &lt;= "001";<br>&nbsp; &nbsp;when 4 =&gt;&nbsp; &nbsp;&nbsp; &nbsp;-- BL = 4<br>&nbsp; &nbsp;&nbsp; &nbsp;SDR_BL &lt;= "010";<br>&nbsp; &nbsp;when 8 =&gt;&nbsp; &nbsp;&nbsp; &nbsp;-- BL = 8<br>&nbsp; &nbsp;&nbsp; &nbsp;SDR_BL &lt;= "011";<br>&nbsp; &nbsp;when others =&gt;&nbsp; &nbsp;-- Full Page<br>&nbsp; &nbsp;&nbsp; &nbsp;SDR_BL &lt;= "111";<br>end case;<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;do_reada&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;do_writea&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;do_refresh&nbsp; &nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;do_precharge&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;do_load_mode&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;do_initial&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;command_done&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;command_delay &nbsp; &nbsp;&lt;= (others =&gt; '0');<br>&nbsp; &nbsp;rw_flag&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;rp_shift&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;= (others =&gt; '0');<br>&nbsp; &nbsp;rp_done&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;ex_read&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;ex_write&nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;if (INIT_REQ = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;do_reada&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;do_writea&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;do_refresh&nbsp; &nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;do_precharge&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;do_load_mode&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;do_initial&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;command_done&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;command_delay &nbsp; &nbsp;&lt;= (others =&gt; '0');<br>&nbsp; &nbsp;&nbsp; &nbsp;rw_flag&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;rp_shift&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;= (others =&gt; '0');<br>&nbsp; &nbsp;&nbsp; &nbsp;rp_done&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;ex_read&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;ex_write&nbsp; &nbsp;&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;do_initial &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;if ((REF_REQ = '1' or REFRESH = '1') and command_done = '0' and do_refresh = '0' and<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; rp_done = '0' and do_reada = '0' and do_writea = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; do_refresh &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_refresh &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (READA = '1' and command_done = '0' and do_reada = '0' and rp_done = '0' and <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; REF_REQ = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; do_reada &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ex_read &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_reada &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (WRITEA = '1' and command_done = '0' and do_writea = '0' and <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; rp_done = '0' and REF_REQ = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; do_writea &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ex_write &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_writea &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (PRECHARGE = '1' and command_done = '0' and do_precharge = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_precharge &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_precharge &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (LOAD_MODE = '1' and command_done = '0' and do_load_mode = '0') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_load_mode &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_load_mode &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (do_refresh = '1' or do_reada = '1' or do_writea = '1' or do_precharge = '1' or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; do_load_mode = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; command_delay &lt;= X"FF";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; command_done&nbsp; &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; rw_flag &lt;= do_reada; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;command_done&nbsp; &lt;= command_delay(0);&nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;command_delay &lt;= '0' &amp; command_delay(7 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (command_delay(0) = '0' and command_done = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_shift &lt;= X"F";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_done &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_PM = 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_done &lt;= rp_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_shift &lt;= '0' &amp; rp_shift(3 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (ex_read = '0' and ex_write = '0') then <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_done&nbsp; &nbsp;&lt;= rp_shift(0);<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;rp_shift&nbsp; &nbsp;&lt;= '0' &amp; rp_shift(3 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (PM_STOP = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rp_done&nbsp; &lt;= rp_shift(0);<br>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;rp_shift&nbsp; &nbsp;&lt;= '0' &amp; rp_shift(3
downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ex_read&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ex_write&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;oe_shift &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;oe1&nbsp; &nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;oe2&nbsp; &nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;oe3&nbsp; &nbsp; &nbsp; &lt;= '0';<br>&nbsp; &nbsp;OE&nbsp; &nbsp; &nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;page_count &lt;= 0;<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;if (SC_PM = 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;if (do_writea = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_BL = 1) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "00000001";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_BL = 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "00000011";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_BL = 4) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "00001111";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_BL = 8) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "11111111";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_BL = 512)then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;page_count &lt;= 0;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "11111111";<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_BL = 256 and&nbsp; SC_BT = 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (page_count = 255 + SC_RCD) then&nbsp; <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;page_count &lt;= page_count + 1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_RCD = 2 and page_count &gt;= 0) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_RCD = 3 and page_count &gt;= 1) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;&nbsp; &nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= '0' &amp; oe_shift(7 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe1&nbsp; &lt;= oe_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe2&nbsp; &lt;= oe1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe3&nbsp; &lt;= oe2;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_RCD = 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_RCD = 3) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;if (do_writea = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= "00000001";<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe_shift &lt;= '0' &amp; oe_shift(7 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe1&nbsp; &lt;= oe_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe2&nbsp; &lt;= oe1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;oe3&nbsp; &lt;= oe2;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (SC_RCD = 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe1;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_RCD = 3) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe2;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OE &lt;= oe_shift(0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;rw_shift &lt;= "000";<br>&nbsp; &nbsp;do_rw&nbsp; &nbsp; &lt;= '0';<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;if (do_reada = '1' or do_writea = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;if (SC_RCD = 1) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;do_rw &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_RCD = 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rw_shift &lt;= "001";<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (SC_RCD = 3) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rw_shift &lt;= "010";<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rw_shift &lt;= "100";<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;rw_shift &lt;= '0' &amp; rw_shift(2 downto 1);<br>&nbsp; &nbsp;&nbsp; &nbsp;do_rw&nbsp; &nbsp; &lt;= rw_shift(0);<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;CM_ACK&nbsp; &lt;= '0';<br>&nbsp; &nbsp;REF_ACK &lt;= '0';<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;if (do_refresh = '1' and REF_REQ = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;REF_ACK &lt;= '1';<br>&nbsp; &nbsp;elsif (do_refresh = '1' or do_reada = '1' or do_writea = '1' or --do_read_to_read = '1' or<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; do_precharge = '1' or do_load_mode = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;CM_ACK &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;REF_ACK &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;CM_ACK &lt;= '0';<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;SA&nbsp; &nbsp; &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;BA&nbsp; &nbsp; &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;CS_N&nbsp; &lt;= '0';<br>&nbsp; &nbsp;RAS_N &lt;= '1';<br>&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;WE_N&nbsp; &lt;= '1';<br>&nbsp; &nbsp;CKE&nbsp; &nbsp;&lt;= '0';<br>&nbsp; &nbsp;<br>elsif (clk'event and clk = '1') then<br>&nbsp; &nbsp;CKE &lt;= '1';<br>&nbsp; &nbsp;if (do_writea = '1' or do_reada = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;SA &lt;= rowaddr;<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;SA(7 downto 0) &lt;= coladdr;<br>&nbsp; &nbsp;&nbsp; &nbsp;if (SC_PM = 1) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;SA(9) &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;SA(9) &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (do_rw = '1' or do_precharge = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;SA(10) &lt;= con_SC_PM;<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (do_precharge = '1' or do_load_mode = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;BA &lt;= "00";<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;BA &lt;= bankaddr(1 downto 0);<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (do_refresh = '1' or do_precharge = '1' or do_load_mode = '1' or do_initial = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;CS_N &lt;= '0'; <br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;CS_N &lt;= SADDR(ADDR_SIZE-1);<br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;if (do_load_mode = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;SA &lt;= ("000" &amp; "00" &amp; SDR_CL &amp; SDR_BT(0) &amp; SDR_BL); <br>&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;&nbsp; &nbsp;<br>&nbsp; &nbsp;if (do_refresh = '1') then&nbsp; &nbsp;&nbsp; &nbsp;--AUTO Refresh oder Self Refresh Mode<br>&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '1';<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;if (do_precharge = '1' and (oe3 = '1' or rw_flag = '1')) then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (do_precharge = '1' or PALL = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (do_load_mode = '1') then&nbsp; &nbsp;&nbsp; &nbsp;--Mode Register Set<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (do_reada = '1' or do_writea = '1') then --Activate Befehl<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (do_rw = '1') then --Read/Write Befehl<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '0';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= rw_flag;<br>&nbsp; &nbsp;&nbsp; &nbsp;elsif (do_initial = '1') then<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CAS_N &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;WE_N&nbsp; &lt;= '1';<br>&nbsp; &nbsp;&nbsp; &nbsp;end if;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>end Behavioral;<br>--###############################################################################--<br>library IEEE;<br>use IEEE.STD_LOGIC_1164.ALL;<br>use IEEE.STD_LOGIC_ARITH.ALL;<br>use IEEE.STD_LOGIC_UNSIGNED.ALL;<br>use work.sdram_package.ALL;<br><br>entity sdr_data_path is<br>&nbsp; &nbsp;port(CLK&nbsp; &nbsp;&nbsp; :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; RESET_N :&nbsp; in std_logic;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; DATAIN&nbsp; :&nbsp; in std_logic_vector(DATA_SIZE - 1 downto 0);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; DQOUT&nbsp; &nbsp;&nbsp; : out std_logic_vector(DATA_SIZE - 1 downto 0)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; );<br>end sdr_data_path;<br><br>architecture Behavioral of sdr_data_path is<br><br>signal DIN1 : std_logic_vector(DATA_SIZE - 1 downto 0);<br>signal DIN2 : std_logic_vector(DATA_SIZE - 1 downto 0);<br>signal DIN3 : std_logic_vector(DATA_SIZE - 1 downto 0);<br>signal DIN4 : std_logic_vector(DATA_SIZE - 1 downto 0);<br>signal DIN5 : std_logic_vector(DATA_SIZE - 1 downto 0);<br>signal DIN6 : std_logic_vector(DATA_SIZE - 1 downto 0);<br> <br>begin<br><br>process(clk,reset_n)<br><br>begin<br><br>if (reset_n = '0') then<br>&nbsp; &nbsp;DIN1 &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;DIN2 &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;DIN3 &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;DIN4 &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;DIN5 &lt;= (others =&gt; '0');<br>&nbsp; &nbsp;DIN6 &lt;= (others =&gt; '0');<br>elsif (clk'event and clk = '0') then<br>&nbsp; &nbsp;DIN1 &lt;=&nbsp; &nbsp;DATAIN;<br>&nbsp; &nbsp;DIN2 &lt;=&nbsp; &nbsp;DIN1;<br>&nbsp; &nbsp;DIN3 &lt;=&nbsp; &nbsp;DIN2;<br>&nbsp; &nbsp;DIN4 &lt;=&nbsp; &nbsp;DIN3;<br>&nbsp; &nbsp;DIN5 &lt;=&nbsp; &nbsp;DIN4;<br>&nbsp; &nbsp;DIN6 &lt;=&nbsp; &nbsp;DIN5;<br>&nbsp; &nbsp;if (SC_RCD = 2) then<br>&nbsp; &nbsp;&nbsp; &nbsp;DQOUT &lt;= DIN3;<br>&nbsp; &nbsp;elsif (SC_RCD = 3) then<br>&nbsp; &nbsp;&nbsp; &nbsp;DQOUT &lt;= DIN4;<br>&nbsp; &nbsp;else<br>&nbsp; &nbsp;&nbsp; &nbsp;DQOUT &lt;= DIN4;<br>&nbsp; &nbsp;end if;<br>end if;<br><br>end process;<br><br>end Behavioral;<br><br></code></dd></dl><br><br>Die
folgenden Grafiken zeigen dir wie du die Signale zum Lesen und
Schreiben setzen musst und wie, bzw wann der SDRAM Controller darauf
reagiert.<br><br><span style="font-weight: bold;">Lesebefehle:</span><br><br><span style="font-style: italic;">SDRAM auslesen mit Burst Länge 1:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/RD_SDRAM_BL1.png" class="postlink"><img src="tutorials%20SDRAM_files/RD_SDRAM_BL1_s.png" alt="Bild"></a><br><br><span style="font-style: italic;">SDRAM auslesen mit Burst Länge 8:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/RD_SDRAM_BL8.png" class="postlink"><img src="tutorials%20SDRAM_files/RD_SDRAM_BL8_s.png" alt="Bild"></a><br><br><span style="font-style: italic;">SDRAM auslesen im Full Page Mode:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/RD_SDRAM_Page.png" class="postlink"><img src="tutorials%20SDRAM_files/RD_SDRAM_Page_s.png" alt="Bild"></a><br><br><span style="font-weight: bold;">Schreibbefehle:</span><br><br><span style="font-style: italic;">SDRAM schreiben mit Burst Länge 1:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/WR_SDRAM_BL1.png" class="postlink"><img src="tutorials%20SDRAM_files/WR_SDRAM_BL1_s.png" alt="Bild"></a><br><br><span style="font-style: italic;">SDRAM schreiben mit Burst Länge 8:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/WR_SDRAM_BL8.png" class="postlink"><img src="tutorials%20SDRAM_files/WR_SDRAM_BL8_s.png" alt="Bild"></a><br><br><span style="font-style: italic;">SDRAM schreiben im Full Page Mode:</span><br><br><a href="http://www.fpga-talk.de/forum/public_images/WR_SDRAM_Page.png" class="postlink"><img src="tutorials%20SDRAM_files/WR_SDRAM_Page_s.png" alt="Bild"></a><br><br>Hoffe das hilft erstmal ein wenig weiter. Bei Ungereimtheiten einfach nachfragen.<br><br>Grüße Tobias</div>

			

		</div>

		
			<dl class="postprofile" id="profile77">
			<dt>
				<a href="http://www.fpga-talk.de/forum/memberlist.php?mode=viewprofile&amp;u=53"><img src="tutorials%20SDRAM_files/file.png" alt="Benutzeravatar" width="72" height="77"></a><br>
				<a href="http://www.fpga-talk.de/forum/memberlist.php?mode=viewprofile&amp;u=53">Tobias</a>
			</dt>

			

		<dd>&nbsp;</dd>

		<dd><strong>Beiträge:</strong> 38</dd><dd><strong>Registriert:</strong> Do 10. Dez 2009, 08:49</dd>

		</dl>
	

		<div class="back2top"><a href="#wrap" class="top" title="Nach oben">Nach oben</a></div>

		<span class="corners-bottom"><span></span></span></div>
	</div>

	<hr class="divider">

	<form id="viewtopic" method="post" action="./viewtopic.php?f=32&amp;t=39&amp;start=0">

	<fieldset class="display-options" style="margin-top: 0pt;">
		
		<label>Beiträge der letzten Zeit anzeigen: <select name="st" id="st"><option value="0" selected="selected">Alle Beiträge</option><option value="1">1 Tag</option><option value="7">7 Tage</option><option value="14">2 Wochen</option><option value="30">1 Monat</option><option value="90">3 Monate</option><option value="180">6 Monate</option><option value="365">1 Jahr</option></select></label>
		<label>Sortiere nach <select name="sk" id="sk"><option value="a">Autor</option><option value="t" selected="selected">Erstellungsdatum</option><option value="s">Betreff</option></select></label> <label><select name="sd" id="sd"><option value="a" selected="selected">Aufsteigend</option><option value="d">Absteigend</option></select> <input name="sort" value="Los" class="button1" type="submit"></label>
		
	</fieldset>

	</form>
	<hr>


<div class="topic-actions">
	<div class="buttons">
	
		<div class="reply-icon"><a href="http://www.fpga-talk.de/forum/posting.php?mode=reply&amp;f=32&amp;t=39" title="Antwort erstellen"><span></span>Antwort erstellen</a></div>
	
	</div>

	
		<div class="pagination">
			2 Beiträge
			 • Seite <strong>1</strong> von <strong>1</strong>
		</div>
	
</div>


	<p></p><p><a href="http://www.fpga-talk.de/forum/viewforum.php?f=32" class="left-box left" accesskey="r">Zurück zu VHDL Designs</a></p>

	<form method="post" id="jumpbox" action="./viewforum.php" onsubmit="if(document.jumpbox.f.value == -1){return false;}">

	
		<fieldset class="jumpbox">
	
			<label for="f" accesskey="j">Gehe zu:</label>
			<select name="f" id="f" onchange="if(this.options[this.selectedIndex].value != -1){ document.forms['jumpbox'].submit() }">
			
				<option value="-1">Wählen Sie ein Forum aus</option>
			<option value="-1">------------------</option>
				<option value="17">Allgemeines</option>
			
				<option value="20">&nbsp; &nbsp;Über fpga-talk.de</option>
			
				<option value="18">&nbsp; &nbsp;Fragen zum Forum</option>
			
				<option value="19">&nbsp; &nbsp;Vorschläge, Ideen, Kritik</option>
			
				<option value="33">&nbsp; &nbsp;Veranstaltungen</option>
			
				<option value="4">VHDL Ecke</option>
			
				<option value="5">&nbsp; &nbsp;VHDL Basics</option>
			
				<option value="32" selected="selected">&nbsp; &nbsp;VHDL Designs</option>
			
				<option value="24">Verilog Ecke</option>
			
				<option value="25">&nbsp; &nbsp;Verilog Basics</option>
			
				<option value="6">Systeme mit Altera Bausteinen</option>
			
				<option value="7">&nbsp; &nbsp;Altera Hardware Ecke</option>
			
				<option value="8">&nbsp; &nbsp;Altera Software Ecke</option>
			
				<option value="9">&nbsp; &nbsp;Altera IP-Core Ecke</option>
			
				<option value="21">&nbsp; &nbsp;Altera Simulation</option>
			
				<option value="10">Systeme mit Xilinx Bausteinen</option>
			
				<option value="11">&nbsp; &nbsp;Xilinx Hardware Ecke</option>
			
				<option value="12">&nbsp; &nbsp;Xilinx Software Ecke</option>
			
				<option value="13">&nbsp; &nbsp;Xilinx IP-Core Ecke</option>
			
				<option value="22">&nbsp; &nbsp;Xilinx Simulation</option>
			
				<option value="26">Altium Designer</option>
			
				<option value="27">&nbsp; &nbsp;Allgemeines</option>
			
				<option value="28">&nbsp; &nbsp;Tipps und Tricks</option>
			
				<option value="29">Simulink HDL Coder</option>
			
				<option value="30">&nbsp; &nbsp;Allgemeines</option>
			
				<option value="31">&nbsp; &nbsp;Tipps und Tricks</option>
			
				<option value="14">PC Ecke</option>
			
				<option value="15">&nbsp; &nbsp;Allgemeines</option>
			
				<option value="16">&nbsp; &nbsp;Tipps und Tricks</option>
			
				<option value="23">&nbsp; &nbsp;Die Serielle Schnittstelle</option>
			
			</select>
			<input value="Los" class="button1" type="submit">
		</fieldset>
	</form>


<div style="height: 15px;"></div>

	<h3>Wer ist online?</h3>
	<p>Mitglieder in diesem Forum: 0 Mitglieder und 1 Gast</p>
</div>
<div id="bottom_body"></div>
</div>

<div id="page-footer">

	<div class="navbar">
		<div class="inner">

		<ul class="linklist">
			<li class="icon-home"> &nbsp; <a href="http://www.fpga-talk.de/forum/index.php" accesskey="h">Foren-Übersicht</a></li>
				
			<li class="rightside"><a href="http://www.fpga-talk.de/forum/ucp.php?mode=delete_cookies">Alle Cookies des Boards löschen</a> • Alle Zeiten sind UTC </li>
		</ul>

		</div>
	</div>
	
<!--
	We request you retain the full copyright notice below including the link to www.phpbb.com.
	This not only gives respect to the large amount of time given freely by the developers
	but also helps build interest, traffic and use of phpBB3. If you (honestly) cannot retain
	the full copyright we ask you at least leave in place the "Powered by phpBB" line, with
	"phpBB" linked to www.phpbb.com. If you refuse to include even this then support on our
	forums may be affected.

	The phpBB Group : 2006
//-->

	<div id="copyright">Powered by <a href="http://www.phpbb.com/">phpBB</a> © 2000, 2002, 2005, 2007 phpBB Group.
		 Deutsche Übersetzung durch <a href="http://www.phpbb.de/">phpBB.de</a> 
		<br>FPGA Talk - style by DeFate • Original WebDesign by <a href="http://www.templateworld.com/index.html" title="Template World">Template World</a>
		
	</div>
</div>

<div>
	<a id="bottom" name="bottom" accesskey="z"></a>
	<img src="tutorials%20SDRAM_files/cron.gif" alt="cron" width="1" height="1">
</div>

</body></html>